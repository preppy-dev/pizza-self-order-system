{"ast":null,"code":"import Axios from \"axios\";\nimport { ORDER_CREATE_REQUEST, ORDER_CREATE_SUCCESS, ORDER_CREATE_FAIL, ORDER_DETAILS_REQUEST, ORDER_DETAILS_SUCCESS, ORDER_DETAILS_FAIL, ORDER_PAY_REQUEST, ORDER_PAY_SUCCESS, ORDER_PAY_FAIL, MY_ORDER_LIST_REQUEST, MY_ORDER_LIST_SUCCESS, MY_ORDER_LIST_FAIL, ORDER_DELETE_REQUEST, ORDER_DELETE_SUCCESS, ORDER_DELETE_FAIL, ORDER_LIST_REQUEST, ORDER_LIST_SUCCESS, ORDER_LIST_FAIL } from \"../constants/orderConstants\";\n\nconst createOrder = order => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: ORDER_CREATE_REQUEST,\n      payload: order\n    });\n    const {\n      userSignin: {\n        userInfo\n      }\n    } = getState();\n    const {\n      data: {\n        data: newOrder\n      }\n    } = await Axios.post(\"/api/orders\", order, {\n      headers: {\n        Authorization: \" Bearer \" + userInfo.token\n      }\n    });\n    dispatch({\n      type: ORDER_CREATE_SUCCESS,\n      payload: newOrder\n    });\n  } catch (error) {\n    dispatch({\n      type: ORDER_CREATE_FAIL,\n      payload: error.message\n    });\n  }\n};\n\nconst listMyOrders = () => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: MY_ORDER_LIST_REQUEST\n    });\n    const {\n      userSignin: {\n        userInfo\n      }\n    } = getState();\n    const {\n      data\n    } = await Axios.get(\"/api/orders/mine\", {\n      headers: {\n        Authorization: \"Bearer \" + userInfo.token\n      }\n    });\n    dispatch({\n      type: MY_ORDER_LIST_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: MY_ORDER_LIST_FAIL,\n      payload: error.message\n    });\n  }\n};\n\nconst listOrders = () => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: ORDER_LIST_REQUEST\n    });\n    const {\n      userSignin: {\n        userInfo\n      }\n    } = getState();\n    const {\n      data\n    } = await Axios.get(\"/api/orders\", {\n      headers: {\n        Authorization: \"Bearer \" + userInfo.token\n      }\n    });\n    dispatch({\n      type: ORDER_LIST_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: ORDER_LIST_FAIL,\n      payload: error.message\n    });\n  }\n};\n\nconst detailsOrder = orderId => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: ORDER_DETAILS_REQUEST,\n      payload: orderId\n    });\n    const {\n      userSignin: {\n        userInfo\n      }\n    } = getState();\n    const {\n      data\n    } = await Axios.get(\"/api/orders/\" + orderId, {\n      headers: {\n        Authorization: \"Bearer \" + userInfo.token\n      }\n    });\n    dispatch({\n      type: ORDER_DETAILS_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: ORDER_DETAILS_FAIL,\n      payload: error.message\n    });\n  }\n};\n\nconst payOrder = (order, paymentResult) => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: ORDER_PAY_REQUEST,\n      payload: paymentResult\n    });\n    const {\n      userSignin: {\n        userInfo\n      }\n    } = getState();\n    const {\n      data\n    } = await Axios.put(\"/api/orders/\" + order._id + \"/pay\", paymentResult, {\n      headers: {\n        Authorization: \"Bearer \" + userInfo.token\n      }\n    });\n    dispatch({\n      type: ORDER_PAY_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: ORDER_PAY_FAIL,\n      payload: error.message\n    });\n  }\n};\n\nconst deleteOrder = orderId => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: ORDER_DELETE_REQUEST,\n      payload: orderId\n    });\n    const {\n      userSignin: {\n        userInfo\n      }\n    } = getState();\n    const {\n      data\n    } = await Axios.delete(\"/api/orders/\" + orderId, {\n      headers: {\n        Authorization: \"Bearer \" + userInfo.token\n      }\n    });\n    dispatch({\n      type: ORDER_DELETE_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: ORDER_DELETE_FAIL,\n      payload: error.message\n    });\n  }\n};\n\nexport { createOrder, detailsOrder, payOrder, listMyOrders, listOrders, deleteOrder };","map":{"version":3,"sources":["/Users/zulu/wwww/pizza-system/frontend/src/actions/orderActions.js"],"names":["Axios","ORDER_CREATE_REQUEST","ORDER_CREATE_SUCCESS","ORDER_CREATE_FAIL","ORDER_DETAILS_REQUEST","ORDER_DETAILS_SUCCESS","ORDER_DETAILS_FAIL","ORDER_PAY_REQUEST","ORDER_PAY_SUCCESS","ORDER_PAY_FAIL","MY_ORDER_LIST_REQUEST","MY_ORDER_LIST_SUCCESS","MY_ORDER_LIST_FAIL","ORDER_DELETE_REQUEST","ORDER_DELETE_SUCCESS","ORDER_DELETE_FAIL","ORDER_LIST_REQUEST","ORDER_LIST_SUCCESS","ORDER_LIST_FAIL","createOrder","order","dispatch","getState","type","payload","userSignin","userInfo","data","newOrder","post","headers","Authorization","token","error","message","listMyOrders","get","listOrders","detailsOrder","orderId","payOrder","paymentResult","put","_id","deleteOrder","delete"],"mappings":"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","sourcesContent":["import Axios from \"axios\";\nimport {\n  ORDER_CREATE_REQUEST,\n  ORDER_CREATE_SUCCESS,\n  ORDER_CREATE_FAIL,\n  ORDER_DETAILS_REQUEST,\n  ORDER_DETAILS_SUCCESS,\n  ORDER_DETAILS_FAIL,\n  ORDER_PAY_REQUEST,\n  ORDER_PAY_SUCCESS,\n  ORDER_PAY_FAIL,\n  MY_ORDER_LIST_REQUEST,\n  MY_ORDER_LIST_SUCCESS,\n  MY_ORDER_LIST_FAIL,\n  ORDER_DELETE_REQUEST,\n  ORDER_DELETE_SUCCESS,\n  ORDER_DELETE_FAIL,\n  ORDER_LIST_REQUEST,\n  ORDER_LIST_SUCCESS,\n  ORDER_LIST_FAIL,\n} from \"../constants/orderConstants\";\n\nconst createOrder = (order) => async (dispatch, getState) => {\n  try {\n    dispatch({ type: ORDER_CREATE_REQUEST, payload: order });\n    const {\n      userSignin: { userInfo },\n    } = getState();\n    const {\n      data: { data: newOrder },\n    } = await Axios.post(\"/api/orders\", order, {\n      headers: {\n        Authorization: \" Bearer \" + userInfo.token,\n      },\n    });\n    dispatch({ type: ORDER_CREATE_SUCCESS, payload: newOrder });\n  } catch (error) {\n    dispatch({ type: ORDER_CREATE_FAIL, payload: error.message });\n  }\n};\n\nconst listMyOrders = () => async (dispatch, getState) => {\n  try {\n    dispatch({ type: MY_ORDER_LIST_REQUEST });\n    const {\n      userSignin: { userInfo },\n    } = getState();\n    const { data } = await Axios.get(\"/api/orders/mine\", {\n      headers: { Authorization: \"Bearer \" + userInfo.token },\n    });\n    dispatch({ type: MY_ORDER_LIST_SUCCESS, payload: data });\n  } catch (error) {\n    dispatch({ type: MY_ORDER_LIST_FAIL, payload: error.message });\n  }\n};\n\nconst listOrders = () => async (dispatch, getState) => {\n  try {\n    dispatch({ type: ORDER_LIST_REQUEST });\n    const {\n      userSignin: { userInfo },\n    } = getState();\n    const { data } = await Axios.get(\"/api/orders\", {\n      headers: { Authorization: \"Bearer \" + userInfo.token },\n    });\n    dispatch({ type: ORDER_LIST_SUCCESS, payload: data });\n  } catch (error) {\n    dispatch({ type: ORDER_LIST_FAIL, payload: error.message });\n  }\n};\n\nconst detailsOrder = (orderId) => async (dispatch, getState) => {\n  try {\n    dispatch({ type: ORDER_DETAILS_REQUEST, payload: orderId });\n    const {\n      userSignin: { userInfo },\n    } = getState();\n    const { data } = await Axios.get(\"/api/orders/\" + orderId, {\n      headers: { Authorization: \"Bearer \" + userInfo.token },\n    });\n    dispatch({ type: ORDER_DETAILS_SUCCESS, payload: data });\n  } catch (error) {\n    dispatch({ type: ORDER_DETAILS_FAIL, payload: error.message });\n  }\n};\n\nconst payOrder = (order, paymentResult) => async (dispatch, getState) => {\n  try {\n    dispatch({ type: ORDER_PAY_REQUEST, payload: paymentResult });\n    const {\n      userSignin: { userInfo },\n    } = getState();\n    const { data } = await Axios.put(\n      \"/api/orders/\" + order._id + \"/pay\",\n      paymentResult,\n      {\n        headers: { Authorization: \"Bearer \" + userInfo.token },\n      }\n    );\n    dispatch({ type: ORDER_PAY_SUCCESS, payload: data });\n  } catch (error) {\n    dispatch({ type: ORDER_PAY_FAIL, payload: error.message });\n  }\n};\n\nconst deleteOrder = (orderId) => async (dispatch, getState) => {\n  try {\n    dispatch({ type: ORDER_DELETE_REQUEST, payload: orderId });\n    const {\n      userSignin: { userInfo },\n    } = getState();\n    const { data } = await Axios.delete(\"/api/orders/\" + orderId, {\n      headers: { Authorization: \"Bearer \" + userInfo.token },\n    });\n    dispatch({ type: ORDER_DELETE_SUCCESS, payload: data });\n  } catch (error) {\n    dispatch({ type: ORDER_DELETE_FAIL, payload: error.message });\n  }\n};\nexport {\n  createOrder,\n  detailsOrder,\n  payOrder,\n  listMyOrders,\n  listOrders,\n  deleteOrder,\n};\n"]},"metadata":{},"sourceType":"module"}